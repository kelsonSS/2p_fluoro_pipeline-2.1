
function TimingInfo =  ExtractTimingParams(input,debug)
% this function extracts Timing Parameters from the Timing.txt files or
% ThorSync Episode01.H5 files generated by the Thorlabs B-scope and Thorsync
% respectively. 
% input - the input file generated by TwoPhotonPipeline
%
% debug - if debug = 0 already registered files will be skipped
%         if debug = 1 all files will be run overwriting previous results
%                       and show a plot containing the trial gate and frame
%                       out signals 



if ~exist('debug','var')
    debug= 0;
end 

    TimingInfo = struct('Errors',[]);
    %% path prep
 
    PsignalFileName = input.psignalfiles;
    SavePath = input.path;
    LocalPath = input.path;
        
    TimingFile = fullfile(LocalPath,'TimingInfo.mat');
    xmlfile = fullfile(LocalPath,'Experiment.xml');
    PsignalFile= fullfile(LocalPath,PsignalFileName);
      fps =input.expectedFPS ;
     if exist(fullfile(LocalPath,'redchannel.mat'),'file')
         fps = fps/2;
     end 
     
     try
     xml = get_options_from_xml(xmlfile);
     catch
         return
     end 
     
    %% File Prep
    if iscell(PsignalFile)
        PsignalFile = PsignalFile{1};
    end 
    
     if ~exist(PsignalFile,'file')
        TimingInfo.Errors = LocalPath;
         return
    end
    
    
   % if file was already processed correctly, continue to next expt 
    if exist(TimingFile,'file') && debug ~= 1
            load(TimingFile)
            if isfield(TimingInfo,'Errors') && isempty(Timinfo.Errors) &&...
                    isfield(TimingInfo,'Frameidx')
                return
            end 
    end 
    %% get actual number of frames in registered file 
    
    fh = fopen( fullfile(LocalPath,'greenchannel.raw'));
    if fh == -1
        return
    end 
    
   num_frames_actual = FindRawImgSize(fh,[xml.dimX xml.dimY]);
   fclose(fh);
        
        
        %% extraction    
         ThorFile = fullfile(LocalPath, 'Episode001.h5');
      
       
        if ~exist(ThorFile,'file')
           
            ThorOrigPath = fullfile(input.inpath,input.expname, 'Episode001.h5');
        
            if exist(ThorOrigPath,'file')
                 
                filePreparation(input.expname,input.inpath,input.savepath)
               
            end
            
            
        end
        
        if exist(ThorFile,'file')
             % ThorImage >3.1
            TimingInfo = getTimingInfo_H5(ThorFile, PsignalFile, fps,xml,num_frames_actual,debug);
  
        else
            
            ThorFile = fullfile(LocalPath ,'timing.txt' );
            % Thorimage 2.1 
            if exist(ThorFile,'file')
                if ~exist(fullfile(LocalPath, 'timing.txt'),'file')
                    
                    copyfile( ThorFile , fullfile(LocalPath) )
                end
                
                TimingInfo = getTimingInfo(ThorFile, PsignalFile, fps);
               
            end
        end


if  isfield(TimingInfo,'FrameIdx') % if extraction was successful

if debug
    % if there is already a file check that these changes dont affect the
    % data
    if exist(TimingFile,'file')
        old  = load(TimingFile);
        old = old.TimingInfo;
        % if there is a shift more than 1 frame stop for manual inspection
      try
        shift_flag = max(max(abs(old.FrameIdx - TimingInfo.FrameIdx))) > 1; 
      catch
          shift_flag = 1;
      end 
        
        if shift_flag == 1 
             fo=h5read(ThorFile,'/DI/Frame Out');
             try
                 gate=h5read(ThorFile,'/AI/ai5'); % trial gate signal
             catch
                 gate=h5read(ThorFile,'/AI/PsignalGate');
             end
            fprintf('Trial 1 New:%d-%d \n Trial 1 Old:%d-%d \n',...
                   TimingInfo.FrameIdx(1,:),old.FrameIdx(1,:))
             % plot frame out and trial gate 
               figure; plot(gate); hold on; plot(fo);
             
             title(sprintf( '%s',  LocalPath),...
                 'interpreter','none')
               xlabel(sprintf('Trial 1 New:%d-%d \n Trial 1 Old:%d-%d',...
                   TimingInfo.FrameIdx(1,:),old.FrameIdx(1,:) ));
             clear gate 
             clear fo
        end 
    end 
end 



% save the timing file 
%% check if 3d Movie
if xml.totalZplanes > 1
    Extract3DTimingInfo(TimingInfo,xml,num_frames_actual,TimingFile)
else
save(TimingFile,'TimingInfo')
%clear TimingInfo
end

end 





function Extract3DTimingInfo(TimingInfoAll,xml,num_frames,out_path)

% initialize variables
num_planes = xml.totalZplanes;
volumes = ceil(num_frames/ num_planes) ;
PlaneID = repmat([1:num_planes]',volumes,1);
PlaneID = PlaneID(1:num_frames);
num_trials = size(TimingInfoAll.FrameIdx,1);

%%
for plane_idx = 1:num_planes
   % initialize plane timing info
   TimingInfo = struct();
   TimingInfo.tarFnums = ceil(TimingInfoAll.tarFnums/ num_planes) ;
   
   %% extract plane timing info
   PlaneTimes = find(PlaneID == plane_idx);
    for trial_idx = 1:num_trials
        
        % find the plane that the trial starts on
        trial_frames = TimingInfoAll.FrameIdx(trial_idx,:);
        
        start_idx = find(PlaneTimes >= trial_frames(1),1 );
        end_idx = start_idx + TimingInfo.tarFnums;
        TimingInfo.FrameIdx(trial_idx,:) = [start_idx, end_idx];
        TimingInfo.SeqEndVals(trial_idx) = end_idx;
        
        
    end 
      %% save 
    plane_out_path = [out_path(1:end-4),num2str(plane_idx),'.mat'];
    save(plane_out_path,'TimingInfo')
end 
